<?php
	
	namespace Quellabs\ObjectQuel\Sculpt\Commands;
	
	use Quellabs\Sculpt\CommandBase;
	use Quellabs\Sculpt\ConfigurationManager;
	use Quellabs\Sculpt\Console\ConsoleOutput;
	
	/**
	 * QuelCreatePhinxConfigCommand - CLI command for generating Phinx configuration
	 *
	 * This command creates a Phinx configuration file (phinx.php) that allows users
	 * to directly use Phinx's command-line tools for advanced migration operations
	 * that are not available through the ObjectQuel migration wrapper.
	 *
	 * The generated configuration file will use the same database connection
	 * settings as the application, ensuring consistency between direct Phinx usage
	 * and the ObjectQuel wrapper.
	 */
	class QuelCreatePhinxConfigCommand extends CommandBase {
		
		/**
		 * Execute the command
		 *
		 * This method generates a phinx.php configuration file in the project root
		 * using the database connection settings from the application. It handles
		 * potential errors and provides feedback to the user.
		 *
		 * @param ConfigurationManager $config Configuration manager instance
		 * @return int Exit code (0 for success, 1 for failure)
		 */
		public function execute(ConfigurationManager $config): int {
			try {
				// Fetch the Phinx configuration array
				$phinxConfig = $this->getProvider()->createPhinxConfig();
				
				// Determine the target directory - project root is preferable
				$projectRoot = $this->determineProjectRoot();
				$filePath = $projectRoot . '/phinx.php';
				
				// Format the config array as PHP code
				$fileContent = "<?php\n\n/**\n * Phinx Configuration File\n *\n * This file was auto-generated by the ObjectQuel migration system.\n * It allows direct use of Phinx commands for advanced migration features.\n *\n * @see https://book.cakephp.org/phinx/0/en/commands.html\n */\n\nreturn " . $this->varExport($phinxConfig) . ";\n";
				
				// Write to phinx.php in the project root
				$result = file_put_contents($filePath, $fileContent);
				
				if ($result === false) {
					throw new \RuntimeException("Failed to write configuration file to {$filePath}");
				}
				
				// Provide success feedback to the user
				$this->output->success("Phinx configuration file created at: {$filePath}");
				$this->output->writeln("");
				$this->output->writeln("You can now use Phinx directly with commands like:");
				$this->output->writeln("  vendor/bin/phinx status");
				$this->output->writeln("  vendor/bin/phinx seed:create UserSeeder");
				$this->output->writeln("  vendor/bin/phinx seed:run");
				
				return 0; // Success
			} catch (\Exception $e) {
				$this->output->error("Failed to create Phinx configuration: " . $e->getMessage());
				return 1; // Error
			}
		}

		/**
		 * Get the command signature/name for registration in the CLI
		 * @return string Command signature
		 */
		public function getSignature(): string {
			return "quel:export-phinx";
		}
		
		/**
		 * Get a short description of what the command does
		 * @return string Command description
		 */
		public function getDescription(): string {
			return "Generate a Phinx configuration file for direct use with Phinx commands";
		}
		
		/**
		 * Get detailed help information for the command
		 * @return string Command help text
		 */
		public function getHelp(): string {
			return <<<EOT
The <info>quel:phinx:config</info> command generates a Phinx configuration file that allows
you to use Phinx's command-line tools directly for advanced migration features.

<comment>Why use this command:</comment>
  * Access advanced Phinx features not available through the ObjectQuel wrapper
  * Use database seeding functionality
  * Set migration breakpoints for more granular control
  * Run Phinx-specific commands not exposed by the ObjectQuel wrapper

<comment>Example usage:</comment>
  1. Generate the configuration file:
     <info>php bin/sculpt quel:phinx:config</info>
  
  2. Use Phinx commands directly:
     <info>vendor/bin/phinx status</info>
     <info>vendor/bin/phinx seed:create UserSeeder</info>
     <info>vendor/bin/phinx seed:run</info>

For more information on Phinx commands, see:
<href=https://book.cakephp.org/phinx/0/en/commands.html>https://book.cakephp.org/phinx/0/en/commands.html</href>
EOT;
		}
		
		/**
		 * This method formats PHP arrays in a more readable way than the standard
		 * var_export function, using modern short array syntax and proper indentation.
		 * @param mixed $var The variable to export
		 * @return string|null Formatted PHP code or null if $return is false
		 */
		private function varExport(mixed $var): ?string {
			// Get standard var_export output
			$dump = var_export($var, true);
			
			// Convert to short array syntax
			$dump = preg_replace('/array\s*\(\s*\)/', '[]', $dump);
			$dump = preg_replace('/array\s*\(/', '[', $dump);
			$dump = preg_replace('/\)$/', ']', $dump);
			$dump = preg_replace('/=>\s*array\s*\(/', '=> [', $dump);
			$dump = preg_replace('/\)(,?)$/', ']$1', $dump);
			
			// Fix indentation
			$lines = explode("\n", $dump);
			$indentLevel = 0;
			$result = [];
			
			foreach ($lines as $line) {
				// Decrease indent level for closing brackets
				if (preg_match('/^\s*]/', $line)) {
					$indentLevel--;
				}
				
				// Add the line with proper indentation
				$result[] = str_repeat('    ', $indentLevel) . trim($line);
				
				// Increase indent level for opening brackets
				if (preg_match('/\[$/', $line)) {
					$indentLevel++;
				}
			}
			
			return implode("\n", $result);
		}
		
		/**
		 * Determine the project root directory
		 * @return string The absolute path to the project root directory
		 */
		private function determineProjectRoot(): string {
			return dirname(__FILE__, 3);
		}
	}